
// Xanadu-BMS firmware settings for CAN:
	// CAN speed: Selectable with tool app 125kbit/s, 250kbit/s & 500kbit/s,
	// CAN ID : Selectable with tool app 1 to 254, correspond to the device specific unique CAN adress on the bus

// CAN protocol: Extended ID
	Bit order during default CAN messages with Extended ID:
	Description  | Start | IDA | SRR | IDE | IDB | RTR | RES | DLC | DATA | CRC | CRC Lim | ACK | ACK Lim | EOF |
	Bits         |   1   | 11  |  1  |  1  |  18 |  1  |  2  |  4  | 0-64 |  15 |    1    |  1  |    1    |  7  |
	// Most parts of the CAN messages are handled over the hardware abstraction layer (HAL) provided by the STM libraries & related firmware code.
	//Only bits related to ID, DATA, DLC, & CRC are handled directly by the user firmware
	// RTR == 0, 

//CAN format used to transmit CAN frames
	// The ID is split into two parts: bits(7-0) = CAN_PACKET_ID & bits(15-8) = Destination ID. Other bits are unused/available with the current implementation
	// Destination ID: This is the adress at which you want your message to be delivered to

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Communication commands over CAN
// After CAN message reception, if the Destination ID == CAN ID, the BMS will receive & process the CAN message
// Broadcast is possible while using the device own CAN ID for transmitting

//For the CAN PACKET IDs used, please refer mainDataTypes.h (enum - CAN_PACKET_ID)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Following is the code transmitting parameters through CAN:
void modCANSendCustom(void)
{
	int32_t send_index = 0;
	uint8_t buffer[8];

/***********************        CAN_PACKET_BMS_V_TOT Structure      *******************************/
		//*
		//* b[0] - b[3]: Pack Voltage(V)
		//* b[4] - b[7]: Load Voltage(V)
		
/**************************************************************************************************/	

	libBufferAppend_float32_auto(buffer, modCANPackStateHandle->packVoltage, &send_index);
	libBufferAppend_float32_auto(buffer, modCANPackStateHandle->loCurrentLoadVoltage, &send_index);
	modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_V_TOT), buffer, send_index);

/***********************        CAN_PACKET_BMS_I Structure      *******************************/
		//*
		//* b[0] - b[3]: Pack Current(A)
		//* b[4] - b[7]: Pack Power(W)

/**************************************************************************************************/

	send_index = 0;
	libBufferAppend_float32_auto(buffer, modCANPackStateHandle->packCurrent, &send_index);
	libBufferAppend_float32_auto(buffer, modCANPackStateHandle->packPower, &send_index);
	modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_I), buffer, send_index);


/***********************        CAN_PACKET_BMS_SOC_CAPACITY Structure      *******************************/
		//*
		//* b[0] - b[3]: SoC
		//* b[4] - b[7]: Remaining Capacity
		
/**************************************************************************************************/
	send_index = 0;
	libBufferAppend_float32_auto(buffer, modCANPackStateHandle->SoC, &send_index);
	libBufferAppend_float32_auto(buffer, modCANPackStateHandle->SoCCapacityAh, &send_index);
	modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID, CAN_PACKET_BMS_SOC_CAPACITY), buffer, send_index);

/***********************        CAN_PACKET_BMS_V_CELL Structure      *******************************/
		//*
		//* b[0]: starting cell voltage index
		//* b[1]: total cell voltages
		//* b[2] - b[3]: cell voltage value
		//* b[4] - b[5]: cell voltage value
		//* b[6] - b[7]: cell voltage value
		
/**************************************************************************************************/
	uint8_t cellPointer = 0;
	uint8_t totalNoOfCells = modCANGeneralConfigHandle->noOfCellsSeries*modCANGeneralConfigHandle->noOfParallelModules;
	while(cellPointer < totalNoOfCells){
		send_index = 0;
		buffer[send_index++] = cellPointer;
		buffer[send_index++] = totalNoOfCells;

		if (cellPointer < totalNoOfCells) {
			libBufferAppend_float16(buffer, modCANPackStateHandle->cellVoltagesIndividual[cellPointer++].cellVoltage, 1e3, &send_index);
		}
		if (cellPointer < totalNoOfCells) {
			libBufferAppend_float16(buffer, modCANPackStateHandle->cellVoltagesIndividual[cellPointer++].cellVoltage, 1e3, &send_index);
		}
		if (cellPointer < totalNoOfCells) {
			libBufferAppend_float16(buffer, modCANPackStateHandle->cellVoltagesIndividual[cellPointer++].cellVoltage, 1e3, &send_index);
		}
		modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_V_CELL), buffer, send_index);
	}

	send_index = 0;
	buffer[send_index++] = totalNoOfCells;
	uint64_t bal_state = 0;
	for (int i = 0; i < totalNoOfCells; i++) {
		bal_state |= (uint64_t)modCANPackStateHandle->cellVoltagesIndividual[i].cellBleedActive << i;
	}
	buffer[send_index++] = (bal_state >> 48) & 0xFF;
	buffer[send_index++] = (bal_state >> 40) & 0xFF;
	buffer[send_index++] = (bal_state >> 32) & 0xFF;
	buffer[send_index++] = (bal_state >> 24) & 0xFF;
	buffer[send_index++] = (bal_state >> 16) & 0xFF;
	buffer[send_index++] = (bal_state >> 8) & 0xFF;
	buffer[send_index++] = (bal_state >> 8) & 0xFF;
	modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_BAL), buffer, send_index);

/***********************        CAN_PACKET_BMS_TEMPS Structure      *******************************/
		//*
		//* b[0]: starting temp sensor index
		//* b[1]: total number of temp sensors
		//* b[2] - b[3]: temp sensor value
		//* b[4] - b[5]: temp sensor value
		//* b[6] - b[7]: temp sensor value
		
/**************************************************************************************************/
	uint8_t auxPointer = 0;
	uint8_t totalNoOfAux =modCANGeneralConfigHandle->cellMonitorICCount*modCANGeneralConfigHandle->noOfTempSensorPerModule;
	while (auxPointer < totalNoOfAux ) {
		send_index = 0;
		buffer[send_index++] = auxPointer;
		buffer[send_index++] = totalNoOfAux;
		if (auxPointer < totalNoOfAux) {
			libBufferAppend_float16(buffer, modCANPackStateHandle->auxVoltagesIndividual[auxPointer++].auxVoltage, 1e2, &send_index);
		}
		if (auxPointer < totalNoOfAux) {
			libBufferAppend_float16(buffer, modCANPackStateHandle->auxVoltagesIndividual[auxPointer++].auxVoltage, 1e2, &send_index);
		}
		if (auxPointer < totalNoOfAux) {
			libBufferAppend_float16(buffer, modCANPackStateHandle->auxVoltagesIndividual[auxPointer++].auxVoltage, 1e2, &send_index);
		}
		modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_TEMPS), buffer, send_index);
	}
/***********************        CAN_PACKET_BMS_V_CELL_STAT Structure      *******************************/
		//*
		//* b[0] - b[1]: Highest cell voltage
		//* b[2] - b[3]: Lowest cell voltage
		//* b[4] - b[5]: Max cell imbalance voltage

/**************************************************************************************************/
	send_index = 0;
	libBufferAppend_float16(buffer, modCANPackStateHandle->cellVoltageHigh, 1e3, &send_index);
	libBufferAppend_float16(buffer, modCANPackStateHandle->cellVoltageLow, 1e3, &send_index);
	libBufferAppend_float16(buffer, modCANPackStateHandle->cellVoltageMisMatch, 1e3, &send_index);
	modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID, CAN_PACKET_BMS_V_CELL_STAT), buffer, send_index);

/***********************        CAN_PACKET_BMS_STATUS Structure      *******************************/
		//*
		//* b[0]: BAT_TEMP_MAX (-128 to +127 degC)
		//* b[1]: BAT_TEMP_MIN (-128 to +127 degC)
		//* b[2]: SoH (0 - 255)
		//* b[3]: Cycle Count
		//* b[4]: Operational State
		//* b[5]: Fault State
		//* b[6]: Discharge throttle value
		//* b[7]: State bitfield:
		//* [B7      	   B6               B5              B4         B3         B2       B1       B0      ]
		//* [PACK_IN_SOA   Cooling_STAT     PreCHG_STAT     DSG_OK     IS_DSG     CHG_OK   IS_BAL   IS_CHG  ]
/**************************************************************************************************/
		
	send_index = 0;
	buffer[send_index++] = (int8_t) modCANPackStateHandle->tempBatteryHigh;
	buffer[send_index++] = (int8_t) modCANPackStateHandle->tempBatteryLow;
	buffer[send_index++] = (uint8_t) (1 * 255.0); //TO DO:define SoH
	buffer[send_index++] = (uint8_t) modCANPackStateHandle->cycleCount;
	buffer[send_index++] = (uint8_t) modCANPackStateHandle->operationalState;
	buffer[send_index++] = (uint8_t) modCANPackStateHandle->faultState;
	libBufferAppend_uint8(buffer, modCANPackStateHandle->throttleDutyDischarge/10,&send_index);
	buffer[send_index++] =
			(modCANPackStateHandle->chargeDesired << 0) | 
			(modCANPackStateHandle->balanceActive << 1) |
			(modCANPackStateHandle->chargeAllowed << 2) |
			(modCANPackStateHandle->disChargeDesired << 3) |
			(modCANPackStateHandle->disChargeLCAllowed << 4) |
			(modCANPackStateHandle->prechargeStatus << 5) |
			(modCANPackStateHandle->coolingDesired << 6) |
			(modCANPackStateHandle->packInSOADischarge	<< 7);
	modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_STATUS), buffer, send_index);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Code examples for slow and fast messages, not being used currently
/*
void modCANSendSimpleStatusFast(void) {
	int32_t sendIndex;
	uint8_t buffer[8];
	uint8_t flagHolder = 0;
	uint8_t disChargeDesiredMask;
	
	if(modCANGeneralConfigHandle->togglePowerModeDirectHCDelay || modCANGeneralConfigHandle->pulseToggleButton){
		disChargeDesiredMask = modCANPackStateHandle->disChargeDesired && modPowerElectronicsHCSafetyCANAndPowerButtonCheck();
	}else{
		disChargeDesiredMask = modCANPackStateHandle->disChargeDesired && modCANPackStateHandle->powerButtonActuated && modPowerElectronicsHCSafetyCANAndPowerButtonCheck();
	}
	
	flagHolder |= (modCANPackStateHandle->chargeAllowed          << 0);
	flagHolder |= (modCANPackStateHandle->chargeDesired          << 1);
	flagHolder |= (modCANPackStateHandle->disChargeLCAllowed     << 2);
	flagHolder |= (disChargeDesiredMask                          << 3);
	flagHolder |= (modCANPackStateHandle->chargeBalanceActive    << 4);
	flagHolder |= (modCANPackStateHandle->packInSOADischarge     << 5);
	flagHolder |= (modCANPackStateHandle->chargeBalanceActive    << 6);
	flagHolder |= (modCANPackStateHandle->powerButtonActuated    << 7);
	
	// Send (dis)charge throttle and booleans.
	sendIndex = 0;
	libBufferAppend_float16(buffer, modCANPackStateHandle->loCurrentLoadVoltage,1e2,&sendIndex);
  libBufferAppend_float16(buffer, modCANPackStateHandle->SoCCapacityAh,1e2,&sendIndex);
  libBufferAppend_uint8(buffer, (uint8_t)modCANPackStateHandle->SoC,&sendIndex);
  libBufferAppend_uint8(buffer, modCANPackStateHandle->throttleDutyCharge/10,&sendIndex);
  libBufferAppend_uint8(buffer, modCANPackStateHandle->throttleDutyDischarge/10,&sendIndex);
	libBufferAppend_uint8(buffer,flagHolder,&sendIndex);
	modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_STATUS_THROTTLE_CH_DISCH_BOOL), buffer, sendIndex);
}

void modCANSendSimpleStatusSlow(void) {
	int32_t sendIndex;
	uint8_t buffer[8];

	// Send voltage and current
	sendIndex = 0;
	libBufferAppend_float32(buffer, modCANPackStateHandle->packVoltage,1e5,&sendIndex);
	libBufferAppend_float32(buffer, modCANPackStateHandle->packCurrent,1e5,&sendIndex);
	modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_STATUS_MAIN_IV), buffer, sendIndex);
	
	// Send highest and lowest cell voltage
	sendIndex = 0;
	libBufferAppend_float32(buffer, modCANPackStateHandle->cellVoltageLow,1e5,&sendIndex);
	libBufferAppend_float32(buffer, modCANPackStateHandle->cellVoltageHigh,1e5,&sendIndex);
	modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_STATUS_CELLVOLTAGE), buffer, sendIndex);
}

/*
	

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Below is the code used for CAN crc checksum calculation

//#include "libCRC.h"

// CRC Table
const unsigned short libCRCLookupTable[] = { 0x0000, 0x1021, 0x2042, 0x3063, 0x4084,
		0x50a5, 0x60c6, 0x70e7, 0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad,
		0xe1ce, 0xf1ef, 0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7,
		0x62d6, 0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de,
		0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485, 0xa56a,
		0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d, 0x3653, 0x2672,
		0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4, 0xb75b, 0xa77a, 0x9719,
		0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc, 0x48c4, 0x58e5, 0x6886, 0x78a7,
		0x0840, 0x1861, 0x2802, 0x3823, 0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948,
		0x9969, 0xa90a, 0xb92b, 0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50,
		0x3a33, 0x2a12, 0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b,
		0xab1a, 0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41,
		0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49, 0x7e97,
		0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70, 0xff9f, 0xefbe,
		0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78, 0x9188, 0x81a9, 0xb1ca,
		0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f, 0x1080, 0x00a1, 0x30c2, 0x20e3,
		0x5004, 0x4025, 0x7046, 0x6067, 0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d,
		0xd31c, 0xe37f, 0xf35e, 0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214,
		0x6277, 0x7256, 0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c,
		0xc50d, 0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
		0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c, 0x26d3,
		0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634, 0xd94c, 0xc96d,
		0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab, 0x5844, 0x4865, 0x7806,
		0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3, 0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e,
		0x8bf9, 0x9bd8, 0xabbb, 0xbb9a, 0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1,
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short libCRCCalcCRC16(unsigned char *buf, unsigned int len) {
	unsigned int i;
	unsigned short cksum = 0;
	for (i = 0; i < len; i++) {
		cksum = libCRCLookupTable[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
	}
	return cksum;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////